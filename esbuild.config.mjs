import * as fs from "fs";
import * as path from "path";

import esbuild from "esbuild";
import { fileURLToPath } from "url";
import process from "process";
import svelte from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD.
If you want to view the source, please visit the GitHub repository of this plugin.
*/
`;

function copyAssetsPlugin() {
  return {
    name: "copy-assets",
    setup(build) {
      build.onEnd(() => {
        const rootDir = __dirname;
        const distDir = path.join(rootDir, "dist");

        // Copy manifest.json
        fs.copyFileSync(
          path.join(rootDir, "manifest.json"),
          path.join(distDir, "manifest.json")
        );
        console.log("Copied manifest.json to dist/");

        // Copy alert.mp3
        const mp3Source = path.join(rootDir, "src", "assets", "alert.mp3");
        if (fs.existsSync(mp3Source)) {
          fs.copyFileSync(mp3Source, path.join(distDir, "alert.mp3"));
          console.log("Copied alert.mp3 to dist/");
        } else {
          console.warn("alert.mp3 not found, skipping copy.");
        }
      });
    },
  };
}

const prod = process.argv.includes("production");
console.log(`[esbuild] Production mode: ${prod}`);

await esbuild.build({
  entryPoints: ["src/main.ts"],
  outfile: "dist/main.js",
  bundle: true,
  external: ["obsidian"],
  format: "cjs",
  target: "es2018",
  logLevel: "info",

  // Turn off source maps
  sourcemap: false,

  minify: prod,
  banner: {
    js: banner,
  },
  plugins: [
    svelte({
      // Fix the deprecated css: boolean by using "injected"
      compilerOptions: { css: "injected" },
      preprocess: sveltePreprocess(),
    }),
    copyAssetsPlugin(),
  ],
  conditions: [prod ? "production" : "development"],
});

console.log("[esbuild] Build complete, no .map files generated!");
